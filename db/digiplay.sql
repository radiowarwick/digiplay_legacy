--    This SQL DDL script was generated by Microsoft Visual Studio (Release Date: LOCAL BUILD).

--    Driver Used : Microsoft Visual Studio - IBM DB2 Universal Database Driver.
--    Document    : G:\Data\cc\raw\digiplay\Database Design v2 (VISIO 2002).vsd.
--    Time Created: 18 July 2005 20:55.
--    Operation   : From Visio Generate Wizard.
--    Connected data source : No connection.
--    Connected server      : No connection.
--    Connected database    : Not applicable.



-- Create digiplay database.
-- Database "digiplay" cannot be created using SQL create database statement. Use IBM DB2 tools to directly create it.
create database "digiplay";
create user "digiplay_user";
\c digiplay

-- Create new table "audiodir".
-- "audiodir" : Table of audiodir
-- 	"id" : id identifies audiodir
-- 	"audio" : audio is of audiodir
-- 	"directory" : directory is of audiodir  
create table "audiodir" ( 
	"id"  SERIAL,
	"audio" INTEGER not null,
	"directory" INTEGER not null, constraint "audiodir_PK" primary key ("id") ); 

-- Create new table "audioartists".
-- "audioartists" : Table of audioartists
-- 	"id" : id identifies audioartists
-- 	"audio" : audio is of audioartists
-- 	"artist" : artist is of audioartists  
create table "audioartists" ( 
	"id"  SERIAL,
	"audio" INTEGER not null,
	"artist" INTEGER not null, constraint "audioartists_PK" primary key ("id") ); 

-- Create new table "cartstyle".
-- "cartstyle" : Table of cartstyle
-- 	"id" : id identifies cartstyle
-- 	"cart" : cart is of cartstyle
-- 	"property" : property is of cartstyle
-- 	"val" : val is of cartstyle  
create table "cartstyle" ( 
	"id"  SERIAL,
	"cart" INTEGER not null,
	"property" INTEGER not null,
	"val" VARCHAR not null, constraint "cartstyle_PK" primary key ("id") ); 

-- Create new table "lifespans".
-- "lifespans" : Table of lifespans
-- 	"id" : id identifies lifespans
-- 	"name" : name is of lifespans
-- 	"data" : data is of lifespans
-- 	"description" : description is of lifespans  
create table "lifespans" ( 
	"id"  SERIAL,
	"name" VARCHAR not null,
	"data" INTEGER,
	"description" VARCHAR, constraint "lifespans_PK" primary key ("id") ); 

-- Create new table "cartproperties".
-- "cartproperties" : Table of cartproperties
-- 	"id" : id identifies cartproperties
-- 	"name" : name is of cartproperties
-- 	"note" : note is of cartproperties  
create table "cartproperties" ( 
	"id"  SERIAL,
	"name" VARCHAR not null,
	"note" VARCHAR, constraint "cartproperties_PK" primary key ("id") ); 

-- Create new table "progsched".
-- "progsched" : Table of progsched
-- 	"id" : id identifies progsched
-- 	"programme" : programme partly identifies progsched
-- 	"day_start" : day_start is of progsched
-- 	"time_start" : time_start is of progsched
-- 	"notes" : notes is of progsched  
create table "progsched" ( 
	"id"  SERIAL,
	"programme" INTEGER not null,
	"day_start" SMALLINT not null,
	"time_start" TIME not null,
	"notes" VARCHAR, constraint "progsched_PK" primary key ("id") ); 

-- Create new table "progartists".
-- "progartists" : Table of progartists
-- 	"id" : id identifies progartists
-- 	"programme" : programme is of progartists
-- 	"artist" : artist is of progartists  
create table "progartists" ( 
	"id"  SERIAL,
	"programme" INTEGER not null,
	"artist" INTEGER not null, constraint "progartists_PK" primary key ("id") ); 

-- Create new table "progkeywords".
-- "progkeywords" : Table of progkeywords
-- 	"id" : id identifies progkeywords
-- 	"programme" : programme is of progkeywords
-- 	"keyword" : keyword is of progkeywords  
create table "progkeywords" ( 
	"id"  SERIAL,
	"programme" INTEGER not null,
	"keyword" INTEGER not null, constraint "progkeywords_PK" primary key ("id") ); 

-- Create new table "programmes".
-- "programmes" : Table of programmes
-- 	"id" : id identifies programmes
-- 	"name" : name is of programmes
-- 	"description" : description is of programmes
-- 	"date_start" : date_start is of programmes
-- 	"date_end" : date_end is of programmes
-- 	"disable_playlist" : disable_playlist is of programmes  
create table "programmes" ( 
	"id"  SERIAL,
	"name" VARCHAR not null,
	"description" VARCHAR,
	"date_start" DATE,
	"date_end" DATE,
	"disable_playlist" CHARACTER(1) not null, constraint "programmes_PK" primary key ("id") ); 

-- Create new table "audiolog".
-- "audiolog" : Table of audiolog
-- 	"id" : id identifies audiolog
-- 	"audio" : audio is of audiolog
-- 	"userid" : userid is of audiolog
-- 	"download_date" : download_date is of audiolog
-- 	"download_time" : download_time is of audiolog  
create table "audiolog" ( 
	"id"  SERIAL,
	"audio" INTEGER not null,
	"userid" INTEGER not null,
	"download_date" DATE not null,
	"download_time" TIME not null, constraint "audiolog_PK" primary key ("id") ); 

-- Create new table "usercuetypes".
-- "usercuetypes" : Table of usercuetypes
-- 	"id" : id identifies usercuetypes
-- 	"name" : name is of usercuetypes
-- 	"description" : description is of usercuetypes  
create table "usercuetypes" ( 
	"id"  SERIAL,
	"name" VARCHAR not null,
	"description" VARCHAR, constraint "usercuetypes_PK" primary key ("id") ); 

-- Create new table "sust_shows".
-- "sust_shows" : Table of sust_shows
-- 	"id" : id identifies sust_shows
-- 	"usershow" : usershow is of sust_shows
-- 	"date_start" : date_start is of sust_shows
-- 	"time_start" : time_start is of sust_shows
-- 	"length" : length is of sust_shows  
create table "sust_shows" ( 
	"id"  SERIAL,
	"usershow" INTEGER not null,
	"date_start" DATE not null,
	"time_start" TIME not null,
	"length" TIME not null, constraint "sust_shows_PK" primary key ("id") ); 

-- Create new table "usercartsets".
-- "usercartsets" : Table of usercartsets
-- 	"id" : id identifies usercartsets
-- 	"name" : name is of usercartsets
-- 	"directory" : directory is of usercartsets
-- 	"description" : description is of usercartsets  
create table "usercartsets" ( 
	"id"  SERIAL,
	"name" VARCHAR not null,
	"directory" INTEGER not null,
	"description" VARCHAR, constraint "usercartsets_PK" primary key ("id") ); 

-- Create new table "jingletypes".
-- "jingletypes" : Table of jingletypes
-- 	"id" : id identifies jingletypes
-- 	"name" : name is of jingletypes
-- 	"description" : description is of jingletypes  
create table "jingletypes" ( 
	"id"  SERIAL,
	"name" VARCHAR not null,
	"description" CHARACTER(10), constraint "jingletypes_PK" primary key ("id") ); 

-- Create new table "usercues".
-- "usercues" : Table of usercues
-- 	"id" : id identifies usercues
-- 	"usershowaudio" : usershowaudio is of usercues
-- 	"type" : type is of usercues
-- 	"cue_smpl" : cue_smpl is of usercues
-- 	"data" : data is of usercues
-- 	"note" : note is of usercues  
create table "usercues" ( 
	"id"  SERIAL,
	"usershowaudio" INTEGER not null,
	"type" INTEGER not null,
	"cue_smpl" INTEGER not null,
	"data" INTEGER,
	"note" VARCHAR, constraint "usercues_PK" primary key ("id") ); 

-- Create new table "usershownotes".
-- "usershownotes" : Table of usershownotes
-- 	"id" : id identifies usershownotes
-- 	"usershow" : usershow partly identifies usershownotes
-- 	"playlist_position" : playlist_position is of usershownotes
-- 	"note" : note is of usershownotes
-- 	"length" : length is of usershownotes  
create table "usershownotes" ( 
	"id"  SERIAL,
	"usershow" INTEGER not null,
	"playlist_position" SMALLINT not null,
	"note" VARCHAR,
	"length" TIME, constraint "usershownotes_PK" primary key ("id") ); 

-- Create new table "usershowsaudio".
-- "usershowsaudio" : Table of usershowsaudio
-- 	"id" : id identifies usershowsaudio
-- 	"usershow" : usershow is of usershowsaudio
-- 	"audio" : audio is of usershowsaudio
-- 	"playlist_position" : playlist_position is of usershowsaudio
-- 	"note" : note is of usershowsaudio
-- 	"cue_up" : cue_up is of usershowsaudio  
create table "usershowsaudio" ( 
	"id"  SERIAL,
	"usershow" INTEGER not null,
	"audio" INTEGER not null,
	"playlist_position" SMALLINT not null,
	"note" VARCHAR,
	"cue_up" INTEGER, constraint "usershowsaudio_PK" primary key ("id") ); 

-- Create new table "usershows".
-- "usershows" : Table of usershows
-- 	"id" : id identifies usershows
-- 	"name" : name is of usershows
-- 	"userid" : userid is of usershows
-- 	"directory" : directory is of usershows
-- 	"start_date" : start_date is of usershows
-- 	"start_time" : start_time is of usershows
-- 	"length" : length is of usershows  
create table "usershows" ( 
	"id"  SERIAL,
	"name" VARCHAR not null,
	"userid" INTEGER not null,
	"directory" INTEGER not null,
	"start_date" DATE,
	"start_time" TIME,
	"length" TIME, constraint "usershows_PK" primary key ("id") ); 

-- Create new table "stationcartwall".
-- "stationcartwall" : Table of stationcartwall
-- 	"id" : id identifies stationcartwall
-- 	"audio" : audio is of stationcartwall
-- 	"cart" : cart is of stationcartwall  
create table "stationcartwall" ( 
	"id"  SERIAL,
	"audio" INTEGER not null,
	"cart" INTEGER not null, constraint "stationcartwall_PK" primary key ("id") ); 

-- Create new table "sust_sources".
-- "sust_sources" : Table of sust_sources
-- 	"id" : id identifies sust_sources
-- 	"name" : name is of sust_sources
-- 	"description" : description is of sust_sources  
create table "sust_sources" ( 
	"id"  SERIAL,
	"name" VARCHAR not null,
	"description" VARCHAR not null, constraint "sust_sources_PK" primary key ("id") ); 

-- Create new table "audiotypes".
-- "audiotypes" : Table of audiotypes
-- 	"id" : id identifies audiotypes
-- 	"name" : name is of audiotypes
-- 	"description" : description is of audiotypes  
create table "audiotypes" ( 
	"id"  SERIAL,
	"name" VARCHAR not null,
	"description" VARCHAR, constraint "audiotypes_PK" primary key ("id") ); 

-- Create new table "usercartsaudio".
-- "usercartsaudio" : Table of usercartsaudio
-- 	"id" : id identifies usercartsaudio
-- 	"cart" : cart is of usercartsaudio
-- 	"audio" : audio is of usercartsaudio
-- 	"userid" : userid is of usercartsaudio
-- 	"cart_set" : cart_set is of usercartsaudio
-- 	"text" : text is of usercartsaudio  
create table "usercartsaudio" ( 
	"id"  SERIAL,
	"cart" INTEGER not null,
	"audio" INTEGER not null,
	"userid" INTEGER not null,
	"cart_set" INTEGER not null,
	"text" VARCHAR not null, constraint "usercartsaudio_PK" primary key ("id") ); 

-- Create new table "cartwalls".
-- "cartwalls" : Table of cartwalls
-- 	"id" : id identifies cartwalls
-- 	"name" : name is of cartwalls
-- 	"description" : description is of cartwalls  
create table "cartwalls" ( 
	"id"  SERIAL,
	"name" VARCHAR not null,
	"description" VARCHAR, constraint "cartwalls_PK" primary key ("id") ); 

-- Create new table "carts".
-- "carts" : Table of carts
-- 	"id" : id identifies carts
-- 	"wall" : wall is of carts
-- 	"row" : row is of carts
-- 	"col" : col is of carts  
create table "carts" ( 
	"id"  SERIAL,
	"wall" INTEGER not null,
	"row" SMALLINT not null,
	"col" SMALLINT not null, constraint "carts_PK" primary key ("id") ); 

-- Create new table "artistskeywords".
-- "artistskeywords" : Table of artistskeywords
-- 	"id" : id identifies artistskeywords
-- 	"artist" : artist is of artistskeywords
-- 	"keyword" : keyword is of artistskeywords  
create table "artistskeywords" ( 
	"id"  SERIAL,
	"artist" INTEGER not null,
	"keyword" INTEGER not null, constraint "artistskeywords_PK" primary key ("id") ); 

-- Create new table "tasks".
-- "tasks" : Table of tasks
-- 	"id" : id identifies tasks
-- 	"name" : name is of tasks
-- 	"description" : description is of tasks
-- 	"sql_query" : sql_query is of tasks
-- 	"process" : process is of tasks
-- 	"parameters" : parameters is of tasks  
create table "tasks" ( 
	"id"  SERIAL,
	"name" VARCHAR not null,
	"description" VARCHAR not null,
	"sql_query" VARCHAR,
	"process" VARCHAR,
	"parameters" VARCHAR, constraint "tasks_PK" primary key ("id") ); 

-- Create new table "archives".
-- "archives" : Table of archives
-- 	"id" : id identifies archives
-- 	"name" : name is of archives
-- 	"mountstring" : mountstring to archive  
create table "archives" ( 
	"id"  SERIAL,
	"name" VARCHAR not null,
	"mountstring" VARCHAR not null, constraint "archives_PK" primary key ("id") ); 

-- Create new table "companies".
-- "companies" : Table of companies
-- 	"id" : id identifies companies
-- 	"name" : name is of companies  
create table "companies" ( 
	"id"  SERIAL,
	"name" VARCHAR not null, constraint "companies_PK" primary key ("id") ); 

-- Create new table "jinglepackage".
-- "jinglepackage" : Table of jinglepackage
-- 	"id" : id identifies jinglepackage
-- 	"name" : name is of jinglepackage
-- 	"description" : description is of jinglepackage
-- 	"enabled" : enabled is of jinglepackage  
create table "jinglepackage" ( 
	"id"  SERIAL,
	"name" VARCHAR not null,
	"description" VARCHAR not null,
	"enabled" CHARACTER(1) not null, constraint "jinglepackage_PK" primary key ("id") ); 

-- Create new table "audiogroups".
-- "audiogroups" : Table of audiogroups
-- 	"id" : id identifies audiogroups
-- 	"audio" : audio is of audiogroups
-- 	"groupid" : groupid is of audiogroups
-- 	"permissions" : permissions is of audiogroups  
create table "audiogroups" ( 
	"id"  SERIAL,
	"audio" INTEGER not null,
	"groupid" INTEGER not null,
	"permissions" CHARACTER(2), constraint "audiogroups_PK" primary key ("id") ); 

-- Create new table "audiousers".
-- "audiousers" : Table of audiousers
-- 	"id" : id identifies audiousers
-- 	"audio" : audio is of audiousers
-- 	"userid" : userid is of audiousers
-- 	"permissions" : permissions is of audiousers  
create table "audiousers" ( 
	"id"  SERIAL,
	"audio" INTEGER not null,
	"userid" INTEGER not null,
	"permissions" CHARACTER(2), constraint "audiousers_PK" primary key ("id") ); 

-- Create new table "audio".
-- "audio" : Table of audio
-- 	"id" : id identifies audio
-- 	"md5" : md5 is of audio
-- 	"archive" : archive is of audio
-- 	"length_smpl" : length_smpl is of audio
-- 	"start_smpl" : start_smpl is of audio
-- 	"end_smpl" : end_smpl is of audio
-- 	"intro_smpl" : intro_smpl is of audio
-- 	"extro_smpl" : extro_smpl is of audio
-- 	"type" : type is of audio
-- 	"creator" : creator is of audio
-- 	"creation_date" : creation_date is of audio
-- 	"import_date" : import_date is of audio
-- 	"title" : title is of audio
-- 	"music_album" : music_album is of audio
-- 	"music_track" : music_track is of audio
-- 	"music_released" : music_released is of audio
-- 	"jingle_type" : jingle_type is of audio
-- 	"jingle_package" : jingle_package is of audio
-- 	"advert_company" : advert_company is of audio
-- 	"advert_description" : advert_description is of audio
-- 	"sustainer" : sustainer is of audio
-- 	"censor" : censor is of audio
-- 	"notes" : notes is of audio
-- 	"param_vol" : param_vol is of audio
-- 	"param_speed" : param_speed is of audio
-- 	"param_mood" : param_mood is of audio
-- 	"param_endstyle" : param_endstyle is of audio
-- 	"lifespan" : lifespan is of audio  
create table "audio" ( 
	"id"  SERIAL,
	"md5" CHARACTER(32) not null,
	"archive" INTEGER not null,
	"length_smpl" INTEGER not null,
	"start_smpl" INTEGER not null,
	"end_smpl" INTEGER not null,
	"intro_smpl" INTEGER not null,
	"extro_smpl" INTEGER not null,
	"type" INTEGER not null,
	"creator" INTEGER not null,
	"creation_date" DATE not null,
	"import_date" DATE not null,
	"title" VARCHAR not null,
	"music_album" INTEGER,
	"music_track" SMALLINT,
	"music_released" SMALLINT,
	"jingle_type" INTEGER,
	"jingle_package" INTEGER,
	"advert_company" INTEGER,
	"advert_description" VARCHAR,
	"sustainer" CHARACTER(1),
	"censor" CHARACTER(1) not null,
	"notes" VARCHAR,
	"param_vol" SMALLINT,
	"param_speed" SMALLINT,
	"param_mood" SMALLINT,
	"param_endstyle" SMALLINT,
	"lifespan" INTEGER not null, constraint "audio_PK" primary key ("id") ); 

-- Create new table "dirusers".
-- "dirusers" : Table of dirusers
-- 	"id" : id identifies dirusers
-- 	"directory" : directory is of dirusers
-- 	"userid" : userid is of dirusers
-- 	"permissions" : permissions is of dirusers  
create table "dirusers" ( 
	"id"  SERIAL,
	"directory" INTEGER not null,
	"userid" INTEGER not null,
	"permissions" CHARACTER(2), constraint "dirusers_PK" primary key ("id") ); 

-- Create new table "dirgroups".
-- "dirgroups" : Table of dirgroups
-- 	"id" : id identifies dirgroups
-- 	"directory" : directory is of dirgroups
-- 	"groupid" : groupid is of dirgroups
-- 	"persmissions" : persmissions is of dirgroups  
create table "dirgroups" ( 
	"id"  SERIAL,
	"directory" INTEGER not null,
	"groupid" INTEGER not null,
	"persmissions" CHARACTER(2), constraint "dirgroups_PK" primary key ("id") ); 

-- Create new table "groupmembers".
-- "groupmembers" : Table of groupmembers
-- 	"id" : id identifies groupmembers
-- 	"groupid" : groupid is of groupmembers
-- 	"userid" : userid is of groupmembers  
create table "groupmembers" ( 
	"id"  SERIAL,
	"groupid" INTEGER not null,
	"userid" INTEGER not null, constraint "groupmembers_PK" primary key ("id") ); 

-- Create new table "groups".
-- "groups" : Table of groups
-- 	"id" : id identifies groups
-- 	"name" : name partly identifies groups
-- 	"description" : description is of groups  
create table "groups" ( 
	"id"  SERIAL,
	"name" VARCHAR not null,
	"description" VARCHAR not null, constraint "groups_PK" primary key ("id") ); 

-- Create new table "dir".
-- "dir" : Table of dir
-- 	"id" : id identifies dir
-- 	"parent" : parent is of dir
-- 	"name" : name is of dir
-- 	"notes" : notes is of dir  
create table "dir" ( 
	"id"  SERIAL,
	"parent" INTEGER not null,
	"name" VARCHAR not null,
	"notes" VARCHAR, constraint "dir_PK" primary key ("id") ); 

-- Create new table "usersconfigs".
-- "usersconfigs" : Table of usersconfigs
-- 	"id" : id identifies usersconfigs
-- 	"userid" : userid partly identifies usersconfigs
-- 	"configoption" : configoption partly identifies usersconfigs
-- 	"val" : val is of usersconfigs  
create table "usersconfigs" ( 
	"id"  SERIAL,
	"userid" INTEGER not null,
	"configoption" INTEGER not null,
	"val" VARCHAR not null, constraint "usersconfigs_PK" primary key ("id") ); 

-- Create new table "configs".
-- "configs" : Table of configs
-- 	"id" : id identifies configs
-- 	"name" : name is of configs
-- 	"description" : description is of configs  
create table "configs" ( 
	"id"  SERIAL,
	"name" VARCHAR not null,
	"description" VARCHAR, constraint "configs_PK" primary key ("id") ); 

-- Create new table "email".
-- "email" : Table of email
-- 	"id" : id identifies email
-- 	"datetime" : datetime is of email
-- 	"sender" : sender is of email
-- 	"subject" : subject is of email
-- 	"body" : body is of email  
create table "email" ( 
	"id"  SERIAL,
	"datetime" TIMESTAMP not null,
	"sender" VARCHAR not null,
	"subject" VARCHAR,
	"body" VARCHAR, constraint "email_PK" primary key ("id") ); 

-- Create new table "useraccess".
-- "useraccess" : Table of useraccess
-- 	"id" : id identifies useraccess
-- 	"userid" : userid partly identifies useraccess
-- 	"privilage" : privilage partly identifies useraccess  
create table "useraccess" ( 
	"id"  SERIAL,
	"userid" INTEGER not null,
	"privilage" INTEGER not null, constraint "useraccess_PK" primary key ("id") ); 

-- Create new table "privilages".
-- "privilages" : Table of privilages
-- 	"id" : id identifies privilages
-- 	"name" : name is of privilages
-- 	"description" : description is of privilages  
create table "privilages" ( 
	"id"  SERIAL,
	"name" VARCHAR not null,
	"description" VARCHAR, constraint "privilages_PK" primary key ("id") ); 

-- Create new table "users".
-- "users" : Table of users
-- 	"id" : id identifies users
-- 	"username" : username partly identifies users
-- 	"password" : user password if not auth on LDAP
-- 	"enabled" : enabled is of users  
create table "users" ( 
	"id"  SERIAL,
	"username" VARCHAR not null,
	"password" CHARACTER(32),
	"enabled" CHARACTER(1) not null, constraint "users_PK" primary key ("id") ); 

-- Create new table "taskschedule".
-- "taskschedule" : Table of taskschedule
-- 	"id" : id identifies taskschedule
-- 	"task" : task is of taskschedule
-- 	"day_start" : day_start is of taskschedule
-- 	"time_start" : time_start is of taskschedule  
create table "taskschedule" ( 
	"id"  SERIAL,
	"task" INTEGER not null,
	"day_start" SMALLINT not null,
	"time_start" TIME not null, constraint "taskschedule_PK" primary key ("id") ); 

-- Create new table "configuration".
-- "configuration" : Table of configuration
-- 	"id" : id identifies configuration
-- 	"parameter" : parameter is of configuration
-- 	"val" : val is of configuration  
create table "configuration" ( 
	"id"  SERIAL,
	"parameter" VARCHAR not null,
	"val" VARCHAR not null, constraint "configuration_PK" primary key ("id") ); 

-- Create new table "sust_sched".
-- "sust_sched" : Table of sust_sched
-- 	"id" : id identifies sust_sched
-- 	"source_type" : source_type is of sust_sched
-- 	"audio" : audio is of sust_sched
-- 	"extfeed" : extfeed is of sust_sched
-- 	"extfeed_length" : extfeed_length is of sust_sched
-- 	"start_date" : start_date is of sust_sched
-- 	"start_time" : start_time is of sust_sched
-- 	"trim_start_smpl" : trim_start_smpl is of sust_sched
-- 	"trim_end_smpl" : trim_end_smpl is of sust_sched
-- 	"fade_in" : fade_in is of sust_sched
-- 	"fade_out" : fade_out is of sust_sched  
create table "sust_sched" ( 
	"id"  SERIAL,
	"source_type" INTEGER not null,
	"audio" INTEGER,
	"extfeed" INTEGER,
	"extfeed_length" INTEGER,
	"start_date" DATE not null,
	"start_time" TIME not null,
	"trim_start_smpl" INTEGER not null,
	"trim_end_smpl" INTEGER not null,
	"fade_in" INTEGER not null,
	"fade_out" INTEGER not null, constraint "sust_sched_PK" primary key ("id") ); 

-- Create new table "advertschedule".
-- "advertschedule" : Table of advertschedule
-- 	"id" : id identifies advertschedule
-- 	"advert" : advert is of advertschedule
-- 	"start_date" : start_date is of advertschedule
-- 	"end_date" : end_date is of advertschedule
-- 	"time_start" : time_start is of advertschedule
-- 	"time_end" : time_end is of advertschedule
-- 	"frequency" : frequency is of advertschedule  
create table "advertschedule" ( 
	"id"  SERIAL,
	"advert" INTEGER not null,
	"start_date" DATE not null,
	"end_date" DATE not null,
	"time_start" TIME,
	"time_end" TIME,
	"frequency" SMALLINT not null, constraint "advertschedule_PK" primary key ("id") ); 

-- Create new table "extfeeds".
-- "extfeeds" : Table of extfeeds
-- 	"id" : id identifies extfeeds
-- 	"name" : name is of extfeeds
-- 	"device" : device is of extfeeds  
create table "extfeeds" ( 
	"id"  SERIAL,
	"name" VARCHAR not null,
	"device" VARCHAR not null, constraint "extfeeds_PK" primary key ("id") ); 

-- Create new table "log".
-- "log" : Table of log
-- 	"id" : id identifies log
-- 	"datetime" : datetime is of log
-- 	"track_title" : track_title is of log
-- 	"track_artist" : track_artist is of log  
create table "log" ( 
	"id"  SERIAL,
	"datetime" TIMESTAMP not null,
	"track_title" VARCHAR not null,
	"track_artist" VARCHAR not null, constraint "log_PK" primary key ("id") ); 

-- Create new table "audiokeywords".
-- "audiokeywords" : Table of audiokeywords
-- 	"id" : id identifies audiokeywords
-- 	"track" : track is of audiokeywords
-- 	"keyword" : keyword is of audiokeywords  
create table "audiokeywords" ( 
	"id"  SERIAL,
	"track" INTEGER not null,
	"keyword" INTEGER not null, constraint "audiokeywords_PK" primary key ("id") ); 

-- Create new table "keywords".
-- "keywords" : Table of keywords
-- 	"id" : id identifies keywords
-- 	"name" : name is of keywords
-- 	"similar" : similar is of keywords  
create table "keywords" ( 
	"id"  SERIAL,
	"name" VARCHAR not null,
	"similar" VARCHAR, constraint "keywords_PK" primary key ("id") ); 

-- Create new table "albums".
-- "albums" : Table of albums
-- 	"id" : id identifies albums
-- 	"name" : name is of albums
-- 	"alt_name" : alt_name is of albums
-- 	"source" : source is of albums
-- 	"reclibid" : reclibid is of albums  
create table "albums" ( 
	"id"  SERIAL,
	"name" VARCHAR not null,
	"alt_name" VARCHAR,
	"source" VARCHAR,
	"reclibid" VARCHAR, constraint "albums_PK" primary key ("id") ); 

-- Create new table "artists".
-- "artists" : Table of artists
-- 	"id" : id identifies artists
-- 	"name" : name is of artists
-- 	"alt_name" : alt_name is of artists  
create table "artists" ( 
	"id"  SERIAL,
	"name" VARCHAR not null,
	"alt_name" VARCHAR, constraint "artists_PK" primary key ("id") ); 

-- Add foreign key constraints to table "audiodir".
alter table "audiodir"
	add constraint "audio_FK11" foreign key (
		"audio")
	 references "audio" (
		"id") on update restrict on delete restrict; 

alter table "audiodir"
	add constraint "dir_FK5" foreign key (
		"directory")
	 references "dir" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "audioartists".
alter table "audioartists"
	add constraint "audio_FK10" foreign key (
		"audio")
	 references "audio" (
		"id") on update restrict on delete restrict; 

alter table "audioartists"
	add constraint "artists_FK3" foreign key (
		"artist")
	 references "artists" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "cartstyle".
alter table "cartstyle"
	add constraint "carts_FK3" foreign key (
		"cart")
	 references "carts" (
		"id") on update restrict on delete restrict; 

alter table "cartstyle"
	add constraint "cartproperties_FK1" foreign key (
		"property")
	 references "cartproperties" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "progsched".
alter table "progsched"
	add constraint "programmes_FK3" foreign key (
		"programme")
	 references "programmes" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "progartists".
alter table "progartists"
	add constraint "programmes_FK2" foreign key (
		"programme")
	 references "programmes" (
		"id") on update restrict on delete restrict; 

alter table "progartists"
	add constraint "artists_FK2" foreign key (
		"artist")
	 references "artists" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "progkeywords".
alter table "progkeywords"
	add constraint "programmes_FK1" foreign key (
		"programme")
	 references "programmes" (
		"id") on update restrict on delete restrict; 

alter table "progkeywords"
	add constraint "keywords_FK3" foreign key (
		"keyword")
	 references "keywords" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "audiolog".
alter table "audiolog"
	add constraint "audio_FK9" foreign key (
		"audio")
	 references "audio" (
		"id") on update restrict on delete restrict; 

alter table "audiolog"
	add constraint "users_FK8" foreign key (
		"userid")
	 references "users" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "sust_shows".
alter table "sust_shows"
	add constraint "usershows_FK3" foreign key (
		"usershow")
	 references "usershows" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "usercartsets".
alter table "usercartsets"
	add constraint "dir_FK3" foreign key (
		"directory")
	 references "dir" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "usercues".
alter table "usercues"
	add constraint "usershowsaudio_FK1" foreign key (
		"usershowaudio")
	 references "usershowsaudio" (
		"id") on update restrict on delete restrict; 

alter table "usercues"
	add constraint "usercuetypes_FK1" foreign key (
		"type")
	 references "usercuetypes" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "usershownotes".
alter table "usershownotes"
	add constraint "usershows_FK2" foreign key (
		"usershow")
	 references "usershows" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "usershowsaudio".
alter table "usershowsaudio"
	add constraint "usershows_FK1" foreign key (
		"usershow")
	 references "usershows" (
		"id") on update restrict on delete restrict; 

alter table "usershowsaudio"
	add constraint "audio_FK8" foreign key (
		"audio")
	 references "audio" (
		"id") on update restrict on delete restrict; 

alter table "usershowsaudio"
	add constraint "usercues_FK1" foreign key (
		"cue_up")
	 references "usercues" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "usershows".
alter table "usershows"
	add constraint "dir_FK4" foreign key (
		"directory")
	 references "dir" (
		"id") on update restrict on delete restrict; 

alter table "usershows"
	add constraint "users_FK9" foreign key (
		"userid")
	 references "users" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "stationcartwall".
alter table "stationcartwall"
	add constraint "audio_FK7" foreign key (
		"audio")
	 references "audio" (
		"id") on update restrict on delete restrict; 

alter table "stationcartwall"
	add constraint "carts_FK2" foreign key (
		"cart")
	 references "carts" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "usercartsaudio".
alter table "usercartsaudio"
	add constraint "carts_FK1" foreign key (
		"cart")
	 references "carts" (
		"id") on update restrict on delete restrict; 

alter table "usercartsaudio"
	add constraint "audio_FK1" foreign key (
		"audio")
	 references "audio" (
		"id") on update restrict on delete restrict; 

alter table "usercartsaudio"
	add constraint "users_FK6" foreign key (
		"userid")
	 references "users" (
		"id") on update restrict on delete restrict; 

alter table "usercartsaudio"
	add constraint "usercartsets_FK1" foreign key (
		"cart_set")
	 references "usercartsets" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "carts".
alter table "carts"
	add constraint "cartwalls_FK1" foreign key (
		"wall")
	 references "cartwalls" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "artistskeywords".
alter table "artistskeywords"
	add constraint "artists_FK1" foreign key (
		"artist")
	 references "artists" (
		"id") on update restrict on delete restrict; 

alter table "artistskeywords"
	add constraint "keywords_FK1" foreign key (
		"keyword")
	 references "keywords" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "audiogroups".
alter table "audiogroups"
	add constraint "groups_FK3" foreign key (
		"groupid")
	 references "groups" (
		"id") on update restrict on delete restrict; 

alter table "audiogroups"
	add constraint "audio_FK6" foreign key (
		"audio")
	 references "audio" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "audiousers".
alter table "audiousers"
	add constraint "users_FK7" foreign key (
		"userid")
	 references "users" (
		"id") on update restrict on delete restrict; 

alter table "audiousers"
	add constraint "audio_FK5" foreign key (
		"audio")
	 references "audio" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "audio".
alter table "audio"
	add constraint "archives_FK1" foreign key (
		"archive")
	 references "archives" (
		"id") on update restrict on delete restrict; 

alter table "audio"
	add constraint "users_FK5" foreign key (
		"creator")
	 references "users" (
		"id") on update restrict on delete restrict; 

alter table "audio"
	add constraint "jinglepackage_FK1" foreign key (
		"jingle_package")
	 references "jinglepackage" (
		"id") on update restrict on delete restrict; 

alter table "audio"
	add constraint "companies_FK1" foreign key (
		"advert_company")
	 references "companies" (
		"id") on update restrict on delete restrict; 

alter table "audio"
	add constraint "albums_FK1" foreign key (
		"music_album")
	 references "albums" (
		"id") on update restrict on delete restrict; 

alter table "audio"
	add constraint "audiotypes_FK1" foreign key (
		"type")
	 references "audiotypes" (
		"id") on update restrict on delete restrict; 

alter table "audio"
	add constraint "jingletypes_FK1" foreign key (
		"jingle_type")
	 references "jingletypes" (
		"id") on update restrict on delete restrict; 

alter table "audio"
	add constraint "lifespans_FK1" foreign key (
		"lifespan")
	 references "lifespans" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "dirusers".
alter table "dirusers"
	add constraint "dir_FK2" foreign key (
		"directory")
	 references "dir" (
		"id") on update restrict on delete restrict; 

alter table "dirusers"
	add constraint "users_FK4" foreign key (
		"userid")
	 references "users" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "dirgroups".
alter table "dirgroups"
	add constraint "dir_FK1" foreign key (
		"directory")
	 references "dir" (
		"id") on update restrict on delete restrict; 

alter table "dirgroups"
	add constraint "groups_FK2" foreign key (
		"groupid")
	 references "groups" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "groupmembers".
alter table "groupmembers"
	add constraint "groups_FK1" foreign key (
		"groupid")
	 references "groups" (
		"id") on update restrict on delete restrict; 

alter table "groupmembers"
	add constraint "users_FK3" foreign key (
		"userid")
	 references "users" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "usersconfigs".
alter table "usersconfigs"
	add constraint "users_FK2" foreign key (
		"userid")
	 references "users" (
		"id") on update restrict on delete restrict; 

alter table "usersconfigs"
	add constraint "configs_FK1" foreign key (
		"configoption")
	 references "configs" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "useraccess".
alter table "useraccess"
	add constraint "users_FK1" foreign key (
		"userid")
	 references "users" (
		"id") on update restrict on delete restrict; 

alter table "useraccess"
	add constraint "privilages_FK1" foreign key (
		"privilage")
	 references "privilages" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "taskschedule".
alter table "taskschedule"
	add constraint "tasks_FK1" foreign key (
		"task")
	 references "tasks" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "sust_sched".
alter table "sust_sched"
	add constraint "audio_FK4" foreign key (
		"audio")
	 references "audio" (
		"id") on update restrict on delete restrict; 

alter table "sust_sched"
	add constraint "extfeeds_FK1" foreign key (
		"extfeed")
	 references "extfeeds" (
		"id") on update restrict on delete restrict; 

alter table "sust_sched"
	add constraint "sust_sources_FK1" foreign key (
		"source_type")
	 references "sust_sources" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "advertschedule".
alter table "advertschedule"
	add constraint "audio_FK3" foreign key (
		"advert")
	 references "audio" (
		"id") on update restrict on delete restrict; 

-- Add foreign key constraints to table "audiokeywords".
alter table "audiokeywords"
	add constraint "audio_FK2" foreign key (
		"track")
	 references "audio" (
		"id") on update restrict on delete restrict; 

alter table "audiokeywords"
	add constraint "keywords_FK2" foreign key (
		"keyword")
	 references "keywords" (
		"id") on update restrict on delete restrict; 

-- Create new views.
-- Create view music.
create view music (title, artist, album) as
select audio.title as title, 
	artists.name as artist, 
	albums.name as album 
from audio, artists, audioartists, albums 
where audioartists.audio = audio.id 
	and audioartists.artist = artists.id 
	and audio.music_album = albums.id
	and audio.type = 0 
order by title;


-- Create view Table1.
create view jingles (title, package, type, active) as
select audio.title as title, 
	jinglepackage.name as package, 
	jingletypes.name as type,
	jinglepackage.enabled as active 
from audio, jinglepackage, jingletypes 
where audio.jingle_package = jinglepackage.id 
	and audio.jingle_type = jingletypes.id
	and audio.type = 1 
order by active desc, package, type, title;



-- This is the end of the Microsoft Visual Studio generated SQL DDL script.
