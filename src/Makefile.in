# Default command tools
CC			=	g++
LD			=	g++
MOC			?=	@/usr/share/qt3/bin/moc
UIC			?=	@/usr/share/qt3/bin/uic

# Set default output location and name
DEST		=	$(ROOT)/bin
OUTPUT      =   $(OUT_BASE)

# Generate object list from the modules provided
# Note: addsuffix might not be portable
# shared objects are those located directly in the src tree
SHARED_OBJS	=	$(addsuffix .o,$(SHARED_MODS))
SHARED_HDRS =	$(addsuffix .h,$(SHARED_MODS))

OBJS        =   $(addsuffix .o,$(MODS)) \
				$(addprefix $(ROOT)/src/,$(SHARED_OBJS))
HDRS		:=	$(addsuffix .h,$(MODS)) \
				$(addprefix $(ROOT)/src/,$(SHARED_HDRS))
QT_OBJS		=
QT_HDRS		=

# Define compiler and linker flags depending on whether we're
# compiling a standard executable or a shared library
CCINC		:=	-I$(ROOT)/src -I$(ROOT)/components -I/usr/include/postgresql
CCFLAGS		:=	-Wall -O3
LDFLAGS		:=	-o $(DEST)/$(OUTPUT)
# if QT is enabled, we need to include the necessary compiler and 
# linker options. We also need to make a few more objects and generate
# the necessary header files
ifeq ($(QT_ENABLED),yes)
	CCINC	+=	-I/usr/share/qt3/mkspecs/default -I/usr/include/qt3
	CCFLAGS	+=	-pipe -W -D_REENTRANT -DQT_NO_DEBUG -DQT_THREAD_SUPPORT \
				-DQT_SHARED
	LIBS	+=	-L/usr/share/qt3/lib -L/usr/X11R6/lib -lqt-mt -lXext -lX11
	QT_OBJS	=	$(addprefix moc_,$(patsubst %.ui,%.o,$(wildcard *.ui)))
	QT_HDRS	=	$(patsubst %.ui,%.h,$(wildcard *.ui)) 
endif

# if we're making a library, need to add the fPIC compiler option
ifeq ($(OUT_LIB),yes)
	CCFLAGS     :=   -fPIC $(CCFLAGS)
	DEST		=	$(ROOT)/lib
	#if we're making a static library, use the archiver, otherwise make shared
    ifeq ($(OUT_STATIC),yes)
		OUTPUT      =   lib$(OUT_BASE).a
		LDFLAGS     :=   -cq $(DEST)/$(OUTPUT)
		LIBS		=	
		LD			=	ar
    else
		OUTPUT      =   lib$(OUT_BASE).so
		LDFLAGS     :=   -shared -Wl,-soname,$(OUTPUT).$(VERSION) \
						-o $(DEST)/$(OUTPUT)
    endif
endif

# ....for when I get round to making it all work nicely :)
MAKEDEPEND	=	$(CC) -M $(CCFLAGS) $(CCINC) -o $*.d $<

# lets not use the default make implicit rules because I wouldn't
# trust them as far as I could throw them :)
.SUFFIXES: .c

# uncomment to keep intermediate QT generated files
#.PRECIOUS: moc_%.cpp %.cpp %.h

# Generate the header file from the QT .ui file
%.h: %.ui
	@echo "Creating UI header file $@"
	$(UIC) $< -o $@

# Create the source code file from the QT files and the header file
%.cpp: %.h %.ui %.ui.h
	@echo "Creating Main source file for $*: $@"
	$(UIC) $*.ui -i $< -o $@

# Create the moc source code file from the header file
moc_%.cpp: %.h
	@echo "Creating moc source file for $*: $@"
	$(MOC) $< -o $@

# Command to compile a standard C++ class
# TODO: Add dependance on header files without make using default rule!
%.o: %.cpp
	@echo "Creating Object file for $*: $@"
	$(CC) $(CCFLAGS) -c $(CCINC) $< -o $@

# Create the required output file from the given objects and place in the
# destination specified
$(OUTPUT): $(QT_OBJS) $(OBJS)
	@if [ ! -d $(DEST) ]; then mkdir $(DEST); fi;
	$(LD) $(LDFLAGS) $(OBJS) $(QT_OBJS) $(LIBS)

# standard
all: $(OUTPUT)
default: $(OUTPUT)

# clean all object files, and remove the .h and .cpp files for QT forms only
# i.e. we only remove *.h and *.cpp if there exists a *.ui
clean:
	@rm -f *.o
	@-$(foreach MOD,$(MODS), if [ -e $(MOD).ui ]; then rm -f moc_$(MOD).cpp $(MOD).cpp $(MOD).h; fi;)
