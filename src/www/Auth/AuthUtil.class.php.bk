<?php
/**
 * @package Auth
 */
include_once($cfg['Auth']['dir']['root'] . '/AuthUtilBase.class.php');

class AuthUtil extends AuthUtilBase {
	
	
	const module = "AuthLDAP";

	function __construct() {
	                parent::__construct();
	}	
	
	public static function checkPassword($user, $pass){
		global $cfg;
		//ldapserver
		$ds=@ldap_connect($cfg['Auth']['LDAPDS']);
		$ldapUser = "uid=" . $username . "," . $cfg['Auth']['LDAPsr'];
		if ($ds) {
			ldap_set_option($ds, LDAP_OPT_PROTOCOL_VERSION, 3);
			$ldapbind = @ldap_bind($ds, $ldapUser, $password);
			ldap_close($ds);
			if($ldapbind) {
				return true;
			} else {
				return false;
			}
		} else {
			throw new Exception("Unable to connect to LDAP server");
		}
	}

        public static function isUsername($usernameOrID){
                if(!is_numeric($usernameOrID)){
			//echo $usernameOrID . ": is Username <br>";
                        return true;
                } else {
                        //Phil: added this IF
			//echo $usernameOrID . ": is not Username <br>";
                        return false;
                }
        }
	
	/**
	 * Change a user's password
	 *
	 * @param int $userID The ID of the user
	 * @param string $password The new password (in plain text)
	 */
	public static function changePassword($userID, $password){
		global $cfg;
		
		if(!is_numeric($userID)){
			throw new LoggedException('A non-numeric (invalid) userID was passed', 0, self::module, 'error');
		}

		
		//$new["userPassword"] = '{md5}' . base64_encode(pack('H*', md5($newpass_in_plaintext)));
		//ldap_modify($ds, $dn, $new);
	}
	
	//checks if the value passed is a university number
	public static function isUserID($usernameOrID){
		static $cache = array();
		global $cfg;
		while(strlen($userid) < 7){
		  $userid = "0" . $userid;
		}
		
		if(!is_numeric($usernameOrID)) {
			return false;
		}
		if(!isset($cache[$usernameOrID])){
			$ds=@ldap_connect($cfg['Auth']['LDAPDS']);
	                if ($ds) {
				ldap_set_option($ds, LDAP_OPT_PROTOCOL_VERSION, 3);
	                        $ldapbind = @ldap_bind($ds);
				while(strlen($usernameOrID)<7) {
					$usernameOrID = "0" . $usernameOrID;
				}
				if($ldapbind) {
					$sr=ldap_search($ds, $cfg['Auth']['LDAPsr'] , "rawuniversitynum=" . $usernameOrID);
					if (ldap_count_entries($ds, $sr) > 0) {
						$cache[$usernameOrID] = true;
					} else {
						$cache[$usernameOrID] = false;
					}
				} else {
					throw new Exception("Unable to bind to LDAP server");
				}
				ldap_close($ds);
			} else {
				throw new Exception("Unable to connect to LDAP server");
			}
		}
		
		return $cache[$usernameOrID];
	}
	
	/**
	 * Return an array of user names indexed by their id number
	 *
	 * @return array A simple 1D associative array
	 */
	public static function getUserList(){
		global $cfg;
		$ds=@ldap_connect($cfg['Auth']['LDAPDS']);
                if ($ds) {
			ldap_set_option($ds, LDAP_OPT_PROTOCOL_VERSION, 3);
			$ldapbind = @ldap_bind($ds);
			if($ldapbind) {
				$sr=ldap_search($ds, $cfg['Auth']['LDAPsr'] , "uid=*");
				$info = ldap_get_entries($ds, $sr);
			} else {
				throw new Exception("Unable to bind to LDAP server");
			}
			ldap_close($ds);
		} else {
			throw new Exception("Unable to connect to LDAP server");
		}
		$sql = "SELECT userid FROM users WHERE username = '" . $cfg['Auth']['anonuser'] . "'";
                $db = Database::getInstance();
                $out[$db->getOne($sql)] = $cfg['Auth']['anonuser'];
		foreach($info as $user){
			$out[$user['rawuniversitynum'][0]] = $user['uid'][0];
		}
		return $out;
	}

	/**
         * Get uninumber given usercode
         *
         * @param mixed $user Either a user name or a user id (in the latter case, $user will simply be returned)
         * @return int The user ID for the specified user.
         *
         */
        public static function getUserID($user){
		global $cfg;
                static $users = array();
		//echo "Getting user ID of: " . $user . "<br>";
		if(isSet($users[$user])) {
			//echo $user . "->" . $users[$user] . " cache<br>";
			return $users[$user];
		} else {
	                if(!self::isUsername($user)){
				//echo $user . "->" . $user . " same<br>";
        	                return $user;
			} else if ($user == $cfg['Auth']['anonuser']) {
				$sql = "SELECT userid FROM users WHERE username = '$user'";
			        $db = Database::getInstance();
				$users[$user] = $db->getOne($sql);
				//echo $user . "->" . $users[$user] . " db<br>";
				return $users[$user];
	                } else {
				$ds=ldap_connect($cfg['Auth']['LDAPDS']);
	        	        if ($ds) {
					ldap_set_option($ds, LDAP_OPT_PROTOCOL_VERSION, 3);
					$ldapbind = ldap_bind($ds);
					if($ldapbind) {
						$sr=ldap_search($ds, $cfg['Auth']['LDAPsr'] , "uid=" . $user);
						$info = ldap_get_entries($ds, $sr);
						if(ldap_count_entries($ds, $sr) > 0) {
							$users[$user] = ltrim($info[0]['rawuniversitynum'][0],"0");
							//echo $user . "->" . $users[$user] . " ldap<br>";
							return $users[$user];
						} else {
							//echo $user . "-> nothing error<br>";
							return $user;
						}
					} else {	
						throw new Exception("Unable to bind to LDAP server(" . $cfg['Auth']['LDAPDS'] . ")");
					}
					ldap_close($ds);
					
				} else {
					throw new Exception("Unable to connect to LDAP server(" . $cfg['Auth']['LDAPDS'] . ")");
				}
			}
		}
        }	
       
	//returns the usercode given uni number
	public static function getUsername($userid){
		global $cfg;
                static $users = array();

		while(strlen($userid) < 7){
		  $userid = "0" . $userid;
		}
		//echo "Getting user ID of: " . $user . "<br>";
		if(isSet($usernames[$userid])) {
			//echo $user . "->" . $users[$user] . " cache<br>";
			return $usernames[$userid];;
		} else {
	                if(!self::isUserID($userid)){
				//echo $userid . "->" . $userid . " same<br>";
        	                return $userid;
			} else if ($userid == $cfg['Auth']['anonuserid']) {
			  return $cfg['Auth']['anonuser'];
			} else {
				$ds=ldap_connect($cfg['Auth']['LDAPDS']);
	        	        if ($ds) {
					ldap_set_option($ds, LDAP_OPT_PROTOCOL_VERSION, 3);
					$ldapbind = ldap_bind($ds);
					if($ldapbind) {
						$sr=ldap_search($ds, $cfg['Auth']['LDAPsr'] , "rawuniversitynum=" . $userid);
						$info = ldap_get_entries($ds, $sr);
						if(ldap_count_entries($ds, $sr) > 0) {
							$usernames[$userid] = $info[0]['uid'][0];
							//echo $user . "->" . $users[$user] . " ldap<br>";
							return $usernames[$userid];
						} else {
							//echo $user . "-> nothing error<br>";
							return $user;
						}
					} else {	
						throw new Exception("Unable to bind to LDAP server(" . $cfg['Auth']['LDAPDS'] . ")");
					}
					ldap_close($ds);
					
				} else {
					throw new Exception("Unable to connect to LDAP server(" . $cfg['Auth']['LDAPDS'] . ")");
				}
			}
		}
        }	
}

?>
